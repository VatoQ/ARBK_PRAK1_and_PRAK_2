
PRAK2_POLLING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f4  00000000  00000000  00000a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000360  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000218  00000000  00000000  000018aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 99 00 	call	0x132	; 0x132 <main>
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <next_state>:
	LO		|	BO		|	OB		|
	OB		|	BO		|	OL		|
	OL		|	BO		|	OB		|
	
	*/
	switch (current_state)
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	99 f0       	breq	.+38     	; 0xaa <next_state+0x2a>
  84:	28 f4       	brcc	.+10     	; 0x90 <next_state+0x10>
  86:	88 23       	and	r24, r24
  88:	41 f0       	breq	.+16     	; 0x9a <next_state+0x1a>
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	51 f0       	breq	.+20     	; 0xa2 <next_state+0x22>
  8e:	19 c0       	rjmp	.+50     	; 0xc2 <next_state+0x42>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	79 f0       	breq	.+30     	; 0xb2 <next_state+0x32>
  94:	84 30       	cpi	r24, 0x04	; 4
  96:	89 f0       	breq	.+34     	; 0xba <next_state+0x3a>
  98:	14 c0       	rjmp	.+40     	; 0xc2 <next_state+0x42>
	{
		case OO:
		{
			if (input == SWI1)
  9a:	64 30       	cpi	r22, 0x04	; 4
  9c:	a1 f0       	breq	.+40     	; 0xc6 <next_state+0x46>
				return BO;
			}
			
			else
			{
				return OB;
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	08 95       	ret
			}
		}
		
		case BO:
		{
			if (input == SWI1)
  a2:	64 30       	cpi	r22, 0x04	; 4
  a4:	91 f0       	breq	.+36     	; 0xca <next_state+0x4a>
				return LO;
			}
			
			else 
			{
				return OB;
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	08 95       	ret
			}
		}
		
		case LO:
		{
			if (input == SWI1)
  aa:	64 30       	cpi	r22, 0x04	; 4
  ac:	81 f0       	breq	.+32     	; 0xce <next_state+0x4e>
				return BO;
			}
			
			else 
			{
				return OB;
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	08 95       	ret
			}
		}
		
		case OB:
		{
			if (input == SWI2)
  b2:	68 30       	cpi	r22, 0x08	; 8
  b4:	71 f0       	breq	.+28     	; 0xd2 <next_state+0x52>
				return OL;
			}
			
			else 
			{
				return BO;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	08 95       	ret
			}
		}
		
		case OL:
		{
			if (input == SWI2)
  ba:	68 30       	cpi	r22, 0x08	; 8
  bc:	61 f0       	breq	.+24     	; 0xd6 <next_state+0x56>
				return OB;
			}
			
			else
			{
				return BO;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	08 95       	ret
			}
		}
	}
	
	return 0;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	08 95       	ret
	{
		case OO:
		{
			if (input == SWI1)
			{
				return BO;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
		
		case BO:
		{
			if (input == SWI1)
			{
				return LO;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	08 95       	ret
		
		case LO:
		{
			if (input == SWI1)
			{
				return BO;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
		
		case OB:
		{
			if (input == SWI2)
			{
				return OL;
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	08 95       	ret
		
		case OL:
		{
			if (input == SWI2)
			{
				return OB;
  d6:	83 e0       	ldi	r24, 0x03	; 3
			}
		}
	}
	
	return 0;
}
  d8:	08 95       	ret

000000da <led_controller>:
/*
LEDs get turned on or off, according to the current state
*/
void led_controller(uint8_t current_state)
{
	switch (current_state)
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	a9 f0       	breq	.+42     	; 0x108 <led_controller+0x2e>
  de:	28 f4       	brcc	.+10     	; 0xea <led_controller+0x10>
  e0:	88 23       	and	r24, r24
  e2:	41 f0       	breq	.+16     	; 0xf4 <led_controller+0x1a>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	51 f0       	breq	.+20     	; 0xfc <led_controller+0x22>
  e8:	1a c0       	rjmp	.+52     	; 0x11e <led_controller+0x44>
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	81 f0       	breq	.+32     	; 0x10e <led_controller+0x34>
  ee:	84 30       	cpi	r24, 0x04	; 4
  f0:	a1 f0       	breq	.+40     	; 0x11a <led_controller+0x40>
  f2:	15 c0       	rjmp	.+42     	; 0x11e <led_controller+0x44>
	{
		// Idle State, both LEDs are off
		case OO:
		{
			PORTB &= ~(1 << PORTB0) & ~(1 << PORTB1);
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	8c 7f       	andi	r24, 0xFC	; 252
  f8:	85 b9       	out	0x05, r24	; 5
			break;
  fa:	11 c0       	rjmp	.+34     	; 0x11e <led_controller+0x44>
		gets implemented: For B the corresponding bit gets flipped,
		for L it gets activated and for O it gets turned off.
		*/
		case BO:
		{
			PORTB &= ~(1 << PORTB0);
  fc:	28 98       	cbi	0x05, 0	; 5
			PORTB ^= (1 << PORTB1);
  fe:	95 b1       	in	r25, 0x05	; 5
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	89 27       	eor	r24, r25
 104:	85 b9       	out	0x05, r24	; 5
			break;
 106:	0b c0       	rjmp	.+22     	; 0x11e <led_controller+0x44>
		}
		
		case LO:
		{
			PORTB &= ~(1 << PORTB0);
 108:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1 << PORTB1);
 10a:	29 9a       	sbi	0x05, 1	; 5
			break;
 10c:	08 c0       	rjmp	.+16     	; 0x11e <led_controller+0x44>
			
		}
		
		case OB:
		{
			PORTB &= ~(1 << PORTB1);
 10e:	29 98       	cbi	0x05, 1	; 5
			PORTB ^= (1 << PORTB0);
 110:	95 b1       	in	r25, 0x05	; 5
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	89 27       	eor	r24, r25
 116:	85 b9       	out	0x05, r24	; 5
			break;
 118:	02 c0       	rjmp	.+4      	; 0x11e <led_controller+0x44>
		}
		
		case OL:
		{
			PORTB &= ~(1 << PORTB1);
 11a:	29 98       	cbi	0x05, 1	; 5
			PORTB |= (1 << PORTB0);
 11c:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	83 ec       	ldi	r24, 0xC3	; 195
 122:	99 e0       	ldi	r25, 0x09	; 9
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <led_controller+0x4a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <led_controller+0x54>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <main>:
}


int main(void)
{
	DDRD = ~(1 << PORTD2) & ~(1 << PORTD3);	// SET INPUT PINS
 132:	83 ef       	ldi	r24, 0xF3	; 243
 134:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1 << PORTB0) | (1 << PORTB1);	// SET OUTPUT LEDs
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	84 b9       	out	0x04, r24	; 4
	
	PORTD |= (1 << PORTD2) | (1 << PORTD3);	// ENABLE PULL-UP RESISTORS
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8c 60       	ori	r24, 0x0C	; 12
 13e:	8b b9       	out	0x0b, r24	; 11
	
	
	/*
	initial button state
	*/
	uint8_t previous_button_state = 0;
 140:	80 e0       	ldi	r24, 0x00	; 0
	PORTD |= (1 << PORTD2) | (1 << PORTD3);	// ENABLE PULL-UP RESISTORS
	
	
	
	// Idle state initialization	
	uint8_t current_state = OO;
 142:	d0 e0       	ldi	r29, 0x00	; 0
    {
		/*
		Getting inputs from register D and clearing any non PD2 and PD3 bits
		to ensure correct comparison between input and logic
		*/
		uint8_t button_states = PIND & ((1 << PORTD2) | (1 << PORTD3));
 144:	c9 b1       	in	r28, 0x09	; 9
 146:	cc 70       	andi	r28, 0x0C	; 12
		
		/*
		Polling for change in inputs
		*/
		if (button_states != previous_button_state)
 148:	8c 17       	cp	r24, r28
 14a:	39 f0       	breq	.+14     	; 0x15a <main+0x28>
		{
			/*
			Only change state if PD2 or PD3 bit is set 0
			(Buttons are low active)
			*/
			if (button_states != ((1 << PORTD2) | (1 << PORTD3)))
 14c:	cc 30       	cpi	r28, 0x0C	; 12
 14e:	29 f0       	breq	.+10     	; 0x15a <main+0x28>
			{
				current_state = next_state(current_state, button_states);
 150:	6c 2f       	mov	r22, r28
 152:	8d 2f       	mov	r24, r29
 154:	0e 94 40 00 	call	0x80	; 0x80 <next_state>
 158:	d8 2f       	mov	r29, r24
			}
			
			previous_button_state = button_states;
		}
		led_controller(current_state);
 15a:	8d 2f       	mov	r24, r29
 15c:	0e 94 6d 00 	call	0xda	; 0xda <led_controller>
 160:	8c 2f       	mov	r24, r28
	}
 162:	f0 cf       	rjmp	.-32     	; 0x144 <main+0x12>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>


PRAK2_INTERRUPT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007da  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  00000b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000386  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e8  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000365  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001de1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_1>
   8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  88:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <next_state>:
	LO		|	BO		|	OB		|
	OB		|	BO		|	OL		|
	OL		|	BO		|	OB		|
	
	*/
	switch (current_state)
  90:	82 30       	cpi	r24, 0x02	; 2
  92:	99 f0       	breq	.+38     	; 0xba <next_state+0x2a>
  94:	28 f4       	brcc	.+10     	; 0xa0 <next_state+0x10>
  96:	88 23       	and	r24, r24
  98:	41 f0       	breq	.+16     	; 0xaa <next_state+0x1a>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	51 f0       	breq	.+20     	; 0xb2 <next_state+0x22>
  9e:	19 c0       	rjmp	.+50     	; 0xd2 <next_state+0x42>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	79 f0       	breq	.+30     	; 0xc2 <next_state+0x32>
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	89 f0       	breq	.+34     	; 0xca <next_state+0x3a>
  a8:	14 c0       	rjmp	.+40     	; 0xd2 <next_state+0x42>
	{
		case OO:
		{
			if (input == SWI1)
  aa:	64 30       	cpi	r22, 0x04	; 4
  ac:	a1 f0       	breq	.+40     	; 0xd6 <next_state+0x46>
				return BO;
			}
			
			else
			{
				return OB;
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	08 95       	ret
			}
		}
		
		case BO:
		{
			if (input == SWI1)
  b2:	64 30       	cpi	r22, 0x04	; 4
  b4:	91 f0       	breq	.+36     	; 0xda <next_state+0x4a>
				return LO;
			}
			
			else 
			{
				return OB;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	08 95       	ret
			}
		}
		
		case LO:
		{
			if (input == SWI1)
  ba:	64 30       	cpi	r22, 0x04	; 4
  bc:	81 f0       	breq	.+32     	; 0xde <next_state+0x4e>
				return BO;
			}
			
			else 
			{
				return OB;
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	08 95       	ret
			}
		}
		
		case OB:
		{
			if (input == SWI2)
  c2:	68 30       	cpi	r22, 0x08	; 8
  c4:	71 f0       	breq	.+28     	; 0xe2 <next_state+0x52>
				return OL;
			}
			
			else 
			{
				return BO;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
			}
		}
		
		case OL:
		{
			if (input == SWI2)
  ca:	68 30       	cpi	r22, 0x08	; 8
  cc:	61 f0       	breq	.+24     	; 0xe6 <next_state+0x56>
				return OB;
			}
			
			else
			{
				return BO;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	08 95       	ret
			}
		}
	}
	
	return 0;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
	{
		case OO:
		{
			if (input == SWI1)
			{
				return BO;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	08 95       	ret
		
		case BO:
		{
			if (input == SWI1)
			{
				return LO;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	08 95       	ret
		
		case LO:
		{
			if (input == SWI1)
			{
				return BO;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	08 95       	ret
		
		case OB:
		{
			if (input == SWI2)
			{
				return OL;
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	08 95       	ret
		
		case OL:
		{
			if (input == SWI2)
			{
				return OB;
  e6:	83 e0       	ldi	r24, 0x03	; 3
			}
		}
	}
	
	return 0;
}
  e8:	08 95       	ret

000000ea <led_controller>:
/*
LEDs get turned on or off, according to the current state
*/
void led_controller(uint8_t current_state)
{
	switch (current_state)
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	a9 f0       	breq	.+42     	; 0x118 <led_controller+0x2e>
  ee:	28 f4       	brcc	.+10     	; 0xfa <led_controller+0x10>
  f0:	88 23       	and	r24, r24
  f2:	41 f0       	breq	.+16     	; 0x104 <led_controller+0x1a>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	51 f0       	breq	.+20     	; 0x10c <led_controller+0x22>
  f8:	1a c0       	rjmp	.+52     	; 0x12e <led_controller+0x44>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	81 f0       	breq	.+32     	; 0x11e <led_controller+0x34>
  fe:	84 30       	cpi	r24, 0x04	; 4
 100:	a1 f0       	breq	.+40     	; 0x12a <led_controller+0x40>
 102:	15 c0       	rjmp	.+42     	; 0x12e <led_controller+0x44>
	{
		// Idle State, both LEDs are off
		case OO:
		{
			PORTB &= ~(1 << PORTB0) & ~(1 << PORTB1);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8c 7f       	andi	r24, 0xFC	; 252
 108:	85 b9       	out	0x05, r24	; 5
			break;
 10a:	11 c0       	rjmp	.+34     	; 0x12e <led_controller+0x44>
		gets implemented: For B the corresponding bit gets flipped,
		for L it gets activated and for O it gets turned off.
		*/
		case BO:
		{
			PORTB &= ~(1 << PORTB0);
 10c:	28 98       	cbi	0x05, 0	; 5
			PORTB ^= (1 << PORTB1);
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	89 27       	eor	r24, r25
 114:	85 b9       	out	0x05, r24	; 5
			break;
 116:	0b c0       	rjmp	.+22     	; 0x12e <led_controller+0x44>
		}
		
		case LO:
		{
			PORTB &= ~(1 << PORTB0);
 118:	28 98       	cbi	0x05, 0	; 5
			PORTB |= (1 << PORTB1);
 11a:	29 9a       	sbi	0x05, 1	; 5
			break;
 11c:	08 c0       	rjmp	.+16     	; 0x12e <led_controller+0x44>
			
		}
		
		case OB:
		{
			PORTB &= ~(1 << PORTB1);
 11e:	29 98       	cbi	0x05, 1	; 5
			PORTB ^= (1 << PORTB0);
 120:	95 b1       	in	r25, 0x05	; 5
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	89 27       	eor	r24, r25
 126:	85 b9       	out	0x05, r24	; 5
			break;
 128:	02 c0       	rjmp	.+4      	; 0x12e <led_controller+0x44>
		}
		
		case OL:
		{
			PORTB &= ~(1 << PORTB1);
 12a:	29 98       	cbi	0x05, 1	; 5
			PORTB |= (1 << PORTB0);
 12c:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	83 ec       	ldi	r24, 0xC3	; 195
 132:	99 e0       	ldi	r25, 0x09	; 9
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <led_controller+0x4a>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <led_controller+0x54>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <__vector_1>:


volatile uint8_t current_state = OO;

ISR(INT0_vect)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	current_state = next_state(current_state, SWI1);
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	0e 94 48 00 	call	0x90	; 0x90 <next_state>
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_2>:

ISR(INT1_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	current_state = next_state(current_state, SWI2);
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ba:	68 e0       	ldi	r22, 0x08	; 8
 1bc:	0e 94 48 00 	call	0x90	; 0x90 <next_state>
 1c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	7f 91       	pop	r23
 1d2:	6f 91       	pop	r22
 1d4:	5f 91       	pop	r21
 1d6:	4f 91       	pop	r20
 1d8:	3f 91       	pop	r19
 1da:	2f 91       	pop	r18
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <main>:



int main(void)
{
	DDRD = ~(1 << PORTD2) & ~(1 << PORTD3);	// SET INPUT PINS
 1e6:	83 ef       	ldi	r24, 0xF3	; 243
 1e8:	8a b9       	out	0x0a, r24	; 10
	DDRB = (1 << PORTB0) | (1 << PORTB1);	// SET OUTPUT LEDs
 1ea:	83 e0       	ldi	r24, 0x03	; 3
 1ec:	84 b9       	out	0x04, r24	; 4
	
	PORTD |= (1 << PORTD2) | (1 << PORTD3);	// ENABLE PULL-UP RESISTORS
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8c 60       	ori	r24, 0x0C	; 12
 1f2:	8b b9       	out	0x0b, r24	; 11
	
	
	EICRA |= (1 << ISC11);
 1f4:	e9 e6       	ldi	r30, 0x69	; 105
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1);
 1fe:	8d b3       	in	r24, 0x1d	; 29
 200:	83 60       	ori	r24, 0x03	; 3
 202:	8d bb       	out	0x1d, r24	; 29
	
	
	sei();
 204:	78 94       	sei
	
    while (1) 
    {
		led_controller(current_state);
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 20a:	0e 94 75 00 	call	0xea	; 0xea <led_controller>
 20e:	fb cf       	rjmp	.-10     	; 0x206 <main+0x20>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
